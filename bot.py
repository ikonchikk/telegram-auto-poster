import os
import re
import sys
import textwrap
import random
import hashlib
import datetime as dt
from zoneinfo import ZoneInfo

import requests
from PIL import Image, ImageDraw, ImageFont, ImageOps

# =====================
# CONFIG
# =====================
TZ = ZoneInfo("Europe/Kyiv")

# –ü–æ—Å—Ç–∏–º —Ç—Ä–∏–∂–¥—ã –≤ –¥–µ–Ω—å –ø–æ –ö–∏–µ–≤—É:
POST_TIMES = [(8, 0), (14, 30), (17, 45)]

# –í–∏–∫–∏-–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å—Ç—Ä–æ–≥–æ –ø—Ä–æ –®–Ü
WIKI_API = "https://uk.wikipedia.org/w/api.php"
WIKI_CATEGORIES = [
    "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:–®—Ç—É—á–Ω–∏–π —ñ–Ω—Ç–µ–ª–µ–∫—Ç",
    "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:–ú–∞—à–∏–Ω–Ω–µ –Ω–∞–≤—á–∞–Ω–Ω—è",
    "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:–ù–µ–π—Ä–æ–Ω–Ω—ñ –º–µ—Ä–µ–∂—ñ",
    "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:–û–±—Ä–æ–±–∫–∞ –ø—Ä–∏—Ä–æ–¥–Ω–æ—ó –º–æ–≤–∏",
    "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:–ö–æ–º–ø'—é—Ç–µ—Ä–Ω–∏–π –∑—ñ—Ä",
]

# –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
HASHTAGS = ["#–®–Ü–¥–ª—è—á–∞–π–Ω–∏–∫—ñ–≤", "#–®–Ü", "#–º–∞—à–∏–Ω–Ω–µ–Ω–∞–≤—á–∞–Ω–Ω—è", "#–Ω–µ–π—Ä–æ–º–µ—Ä–µ–∂—ñ", "#AI"]
STRONG_KWS = [
    "–Ω–µ–π—Ä–æ–Ω", "–º–µ—Ä–µ–∂", "—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä", "attention", "gpt", "bert", "lstm",
    "–∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü", "—Ä–µ–≥—Ä–µ—Å", "–¥–∞—Ç–∞—Å–µ—Ç", "–æ–±—á–∏—Å–ª–µ–Ω", "gpu", "tensor",
    "nlp", "cv", "–º–æ–¥–µ–ª—å", "–∞–ª–≥–æ—Ä–∏—Ç–º", "–π–º–æ–≤—ñ—Ä"
]
EMOJI_POOL = ["ü§ñ", "üß†", "üìä", "‚öôÔ∏è", "‚ú®", "üß™", "üìà"]

# –ö–∞—Ä—Ç–∏–Ω–∫–∞ (flat-card)
IMG_SIZE = (1280, 720)       # 16:9 ‚Äî –∫—Ä–∞—Å–∏–≤–æ –≤ —Ç–≥
ADD_TITLE_ON_IMAGE = True    # –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫—Ä—É–ø–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–µ (–º–æ–∂–Ω–æ False)
BRAND = (os.environ.get("CHANNEL_HANDLE") or "").strip()  # –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ (–æ–ø—Ü.)

# –°–µ–∫—Ä–µ—Ç—ã
TELEGRAM_BOT_TOKEN = (os.environ.get("TELEGRAM_BOT_TOKEN") or "").strip()
TELEGRAM_CHAT_ID   = (os.environ.get("TELEGRAM_CHAT_ID")   or "").strip()

# =====================
# TIME
# =====================
def should_post_now(now: dt.datetime, force=False) -> bool:
    if force:
        return True
    return (now.hour, now.minute) in POST_TIMES

# =====================
# WIKIPEDIA (ai-only)
# =====================
def pick_random_ai_page():
    cat = random.choice(WIKI_CATEGORIES)
    r = requests.get(WIKI_API, params={
        "action": "query", "list": "categorymembers", "cmtitle": cat,
        "cmtype": "page", "cmlimit": 200, "format": "json"
    }, timeout=30)
    r.raise_for_status()
    pages = r.json().get("query", {}).get("categorymembers", [])
    # –æ—Ç—Ñ–∏–ª—å—Ç—Ä—É–µ–º —è–≤–Ω—É—é ¬´–Ω–µ-–®–Ü¬ª
    bad = ["CAPTCHA", "–ö–∞–ø—á–∞", "–≤—ñ–¥–µ–æ–≥—Ä–∞", "—Å–µ—Ä—ñ–∞–ª", "—Ñ—ñ–ª—å–º", "–∫—ñ–Ω–æ"]
    pages = [p for p in pages if not any(b.lower() in p["title"].lower() for b in bad)]
    if not pages:
        raise RuntimeError("–ù–µ–º–∞—î —Å—Ç–æ—Ä—ñ–Ω–æ–∫ —É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó")
    return random.choice(pages)["pageid"]

def fetch_extract(pageid: int):
    r = requests.get(WIKI_API, params={
        "action": "query",
        "prop": "extracts|pageimages|images",
        "pageids": pageid,
        "explaintext": 1, "exintro": 1,
        "piprop": "thumbnail", "pithumbsize": 1280,
        "imlimit": 50, "format": "json",
    }, timeout=30)
    r.raise_for_status()
    page = r.json()["query"]["pages"][str(pageid)]
    title   = page["title"]
    extract = (page.get("extract") or "").strip()
    # –∫–∞—Ä—Ç–∏–Ω–∫—É –∏–∑ —Å—Ç–∞—Ç—å–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –∫–∞–∫ ¬´–Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ç–µ–º—ã¬ª
    thumb = page.get("thumbnail", {}).get("source")
    return title, extract, thumb

# =====================
# SIMPLE REWRITER (free)
# =====================
SYNONYM_MAP = {
    "—à—Ç—É—á–Ω–∏–π —ñ–Ω—Ç–µ–ª–µ–∫—Ç": "—à—Ç—É—á–Ω–∏–π —Ä–æ–∑—É–º",
    "–∫–æ–º–ø'—é—Ç–µ—Ä": "–ï–û–ú",
    "–¥–∞–Ω—ñ": "–Ω–∞–±—ñ—Ä –¥–∞–Ω–∏—Ö",
    "—Å–∏—Å—Ç–µ–º–∞": "—Å–∏—Å—Çe–º–∞",
    "–∑–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è": "–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è",
    "–º–æ–¥–µ–ª—å": "–º–æ–¥e–ª—å",
    "–∞–ª–≥–æ—Ä–∏—Ç–º": "–∞–ª–≥–æ—Äu—Ç–º",
    "–≤–∏–∑–Ω–∞—á–∏—Ç–∏": "–∑‚Äô—è—Å—É–≤–∞—Ç–∏",
}

def _sentences(text: str, n=4):
    parts = re.split(r"(?<=[.!?])\s+", text)
    out = [re.sub(r"\s+", " ", s).strip() for s in parts if s.strip()]
    return out[:n]

def rewrite_text(extract: str) -> list[str]:
    sents = _sentences(extract, 3)
    if not sents:
        return ["–ö–æ—Ä–æ—Ç–∫–æ –ø—Ä–æ –®–Ü –ø—Ä–æ—Å—Ç–∏–º–∏ —Å–ª–æ–≤–∞–º–∏."]
    # —Å–∏–Ω–æ–Ω–∏–º–∞–π–∑–µ—Ä + ¬´—Ä–∞–∑–∂—ë–≤—ã–≤–∞–Ω–∏–µ¬ª
    rewritten = []
    for s in sents:
        for k, v in SYNONYM_MAP.items():
            s = re.sub(k, v, s, flags=re.IGNORECASE)
        # —á—É—Ç—å —É–ø—Ä–æ—Å—Ç–∏–º —Å–ª–æ–∂–Ω—ã–µ –æ–±–æ—Ä–æ—Ç—ã
        s = s.replace("‚Äî", "‚Äî").replace(" - ", " ‚Äî ")
        rewritten.append(s)
    # –¥–æ–±–∞–≤–∏–º –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ª–∏–¥
    lead = random.choice(["–ö–æ—Ä–æ—Ç–∫–æ:", "–ü–æ —Å—É—Ç—ñ:", "–Ø–∫ –ø—Ä–æ—Å—Ç—ñ—à–µ –ø–æ—è—Å–Ω–∏—Ç–∏:"])
    return [lead] + rewritten

def emphasize(html: str) -> str:
    # –∞–≤—Ç–æ-–∂–∏—Ä–Ω—ã–π –≤–∞–∂–Ω—ã—Ö —Å–ª–æ–≤
    for kw in sorted(STRONG_KWS, key=len, reverse=True):
        html = re.sub(rf"(?i)\b{kw}\w*\b",
                      lambda m: f"<b>{m.group(0)}</b>", html)
    return html

def build_caption(title: str, lines: list[str]) -> str:
    emoji = random.choice(EMOJI_POOL)
    # –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∂–∏—Ä–Ω—ã–º
    header = f"{emoji} <b>{title}</b>"
    # –æ—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ ‚Äî –º–∞—Ä–∫–µ—Ä—ã
    body = []
    for i, ln in enumerate(lines):
        if i == 0:
            body.append(ln)  # –ª–∏–¥-—Å—Ç—Ä–æ–∫–∞ –±–µ–∑ –º–∞—Ä–∫–µ—Ä–∞
        else:
            body.append(f"‚Ä¢ {ln}")
    body_html = emphasize("\n".join(body))
    tags = " ".join(HASHTAGS)
    return f"{header}\n\n{body_html}\n\n{tags}"

# =====================
# FLAT-CARD IMAGE
# =====================
def _font(size: int, bold=False):
    path = ("/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf"
            if bold else "/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf")
    return ImageFont.truetype(path, size)

def draw_icon_robot(draw: ImageDraw.ImageDraw, cx, cy, scale=1.0, color=(60,90,80)):
    # –ø—Ä–æ—Å—Ç–æ–π –ø–ª–æ—Å–∫–∏–π ¬´—Ä–æ–±–æ—Ç¬ª
    r = int(80*scale)
    draw.rounded_rectangle((cx-r, cy-r, cx+r, cy+r), 30, fill=color)
    eye_r = int(12*scale)
    draw.ellipse((cx-int(35*scale)-eye_r, cy-eye_r, cx-int(35*scale)+eye_r, cy+eye_r), fill=(255,255,255))
    draw.ellipse((cx+int(35*scale)-eye_r, cy-eye_r, cx+int(35*scale)+eye_r, cy+eye_r), fill=(255,255,255))
    # –≥–∞—Ä–Ω–∏—Ç—É—Ä–∞
    draw.arc((cx-int(110*scale), cy-int(40*scale), cx-int(10*scale), cy+int(40*scale)), 270, 90, fill=color, width=int(10*scale))
    draw.arc((cx+int(10*scale),  cy-int(40*scale), cx+int(110*scale), cy+int(40*scale)), 90, 270, fill=color, width=int(10*scale))
    draw.rectangle((cx-int(15*scale), cy+int(35*scale), cx+int(15*scale), cy+int(50*scale)), fill=color)

def generate_flat_card(title: str, seed: int, out_path: str, hashtag="#–®–Ü"):
    random.seed(seed)
    W, H = IMG_SIZE
    # –ø–∞—Å—Ç–µ–ª—å–Ω—ã–µ –ø–∞–ª–∏—Ç—Ä—ã
    palettes = [
        ((246,242,236), (63, 87, 72)),   # –±–µ–∂/–∑–µ–ª
        ((239,245,250), (58, 76,105)),   # —Å–≤–µ—Ç–ª–æ-–≥–æ–ª—É–±–æ–π/–∏–Ω–¥–∏–≥–æ
        ((244,240,252), (86, 72,115)),   # –ª–∏–ª–æ–≤—ã–π
        ((242,248,244), (70,105,80)),    # –º—è—Ç–Ω—ã–π
    ]
    bg, fg = random.choice(palettes)
    img  = Image.new("RGB", (W, H), bg)
    draw = ImageDraw.Draw(img)

    # –∫—Ä—É–ø–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    if ADD_TITLE_ON_IMAGE:
        f_title = _font(96, bold=True)
        title_clean = title[:40] + ("‚Ä¶" if len(title) > 40 else "")
        tw = draw.textlength(title_clean, font=f_title)
        draw.text(((W-tw)//2, 90), title_clean, font=f_title, fill=fg)

    # –∏–∫–æ–Ω–∫–∞
    draw_icon_robot(draw, W//2, H//2 + (40 if ADD_TITLE_ON_IMAGE else 0), scale=1.0, color=fg)

    # –Ω–∏–∂–Ω–∏–π —Ç–µ–≥
    f_tag = _font(44)
    tag_w = draw.textlength(hashtag, font=f_tag)
    draw.text(((W-tag_w)//2, H-120), hashtag, font=f_tag, fill=fg)

    # –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫
    if BRAND:
        f_brand = _font(28)
        bw = draw.textlength(BRAND, font=f_brand)
        draw.text((W-24-bw, H-48), BRAND, font=f_brand, fill=(120,120,120))

    img.save(out_path, "PNG")

# =====================
# TELEGRAM
# =====================
def send_photo(photo_path: str, caption: str):
    if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
        raise RuntimeError("–ü–æ—Ä–æ–∂–Ω—ñ TELEGRAM_* —Å–µ–∫—Ä–µ—Ç–∏.")
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendPhoto"
    with open(photo_path, "rb") as f:
        r = requests.post(url, data={
            "chat_id": TELEGRAM_CHAT_ID,
            "caption": caption,
            "parse_mode": "HTML",
            "disable_notification": True,
        }, files={"photo": ("card.png", f, "image/png")}, timeout=60)
    if r.status_code != 200:
        raise RuntimeError(f"Telegram error {r.status_code}: {r.text}")

# =====================
# MAIN
# =====================
def main():
    force = "--force" in sys.argv
    now   = dt.datetime.now(TZ)
    if not should_post_now(now, force):
        print("–ù–µ —á–∞—Å –ø–æ—Å—Ç–∏—Ç–∏ ‚Äî –≤–∏—Ö–æ–¥–∏–º–æ")
        return

    pageid           = pick_random_ai_page()
    title, extract, _ = fetch_extract(pageid)
    lines            = rewrite_text(extract)        # —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ (–ª–∏–¥ + 1‚Äì2 —Ñ–∞–∫—Ç–∞)
    caption          = build_caption(title, lines)  # –∂–∏—Ä–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ + –º–∞—Ä–∫–µ—Ä—ã + –∂–∏—Ä–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞

    # –ø–ª–æ—Å–∫–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞
    seed     = int(hashlib.sha256((title + now.date().isoformat()).encode()).hexdigest()[:8], 16)
    img_path = "out.png"
    generate_flat_card(title, seed, img_path, hashtag=HASHTAGS[0])

    send_photo(img_path, caption)
    print("–û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ")

if __name__ == "__main__":
    main()
