import os, re, sys, random, hashlib, math, textwrap
import datetime as dt
from zoneinfo import ZoneInfo
from io import BytesIO

import requests
from PIL import Image, ImageDraw, ImageFont, ImageFilter, ImageOps

# =====================
# CONFIG
# =====================
TZ = ZoneInfo("Europe/Kyiv")

# –¢–†–ò –ß–ê–°–ê –î–ù–Ø (–ø–æ –ö–∏–µ–≤—É)
POST_TIMES = [(8, 0), (14, 30), (17, 45)]

# –¢–µ–º—ã —Ç–æ–ª—å–∫–æ –ø—Ä–æ –®–Ü
WIKI_API = "https://uk.wikipedia.org/w/api.php"
WIKI_CATEGORIES = [
    "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:–®—Ç—É—á–Ω–∏–π —ñ–Ω—Ç–µ–ª–µ–∫—Ç",
    "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:–ú–∞—à–∏–Ω–Ω–µ –Ω–∞–≤—á–∞–Ω–Ω—è",
    "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:–ù–µ–π—Ä–æ–Ω–Ω—ñ –º–µ—Ä–µ–∂—ñ",
    "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:–û–±—Ä–æ–±–∫–∞ –ø—Ä–∏—Ä–æ–¥–Ω–æ—ó –º–æ–≤–∏",
    "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:–ö–æ–º–ø'—é—Ç–µ—Ä–Ω–∏–π –∑—ñ—Ä",
]

# –í–∏–∑—É–∞–ª
IMG_SIZE = (1024, 1024)      # –ö–í–ê–î–†–ê–¢ 1:1
ADD_TITLE_ON_IMAGE = True    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–µ (–º–æ–∂–Ω–æ False)
BRAND = (os.environ.get("CHANNEL_HANDLE") or "").strip()

# –¢–µ–∫—Å—Ç/—Ö–µ—à—Ç–µ–≥–∏
HASHTAGS = ["#–®–Ü–¥–ª—è—á–∞–π–Ω–∏–∫—ñ–≤", "#–®–Ü", "#–º–∞—à–∏–Ω–Ω–µ–Ω–∞–≤—á–∞–Ω–Ω—è", "#–Ω–µ–π—Ä–æ–º–µ—Ä–µ–∂—ñ", "#AI", "#–ø—Ä–∞–∫—Ç–∏–∫–∞"]
EMOJI_POOL = ["ü§ñ","üß†","‚öôÔ∏è","üìä","‚ú®","üß™","üìà"]
STRONG_KWS = [
    "–Ω–µ–π—Ä–æ–Ω", "–º–µ—Ä–µ–∂", "—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä", "attention", "gpt", "bert", "lstm",
    "–∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü", "—Ä–µ–≥—Ä–µ—Å", "–¥–∞—Ç–∞—Å–µ—Ç", "–æ–±—á–∏—Å–ª–µ–Ω", "gpu", "tensor",
    "nlp", "cv", "–º–æ–¥–µ–ª—å", "–∞–ª–≥–æ—Ä–∏—Ç–º", "—ñ–Ω—Ñ–µ—Ä–µ–Ω—Å", "–Ω–∞–≤—á–∞–Ω", "fine-tune"
]

# –°–µ–∫—Ä–µ—Ç—ã
TELEGRAM_BOT_TOKEN = (os.environ.get("TELEGRAM_BOT_TOKEN") or "").strip()
TELEGRAM_CHAT_ID   = (os.environ.get("TELEGRAM_CHAT_ID")   or "").strip()

# =====================
# TIME
# =====================
def should_post_now(now: dt.datetime, force=False) -> bool:
    if force:
        return True
    return (now.hour, now.minute) in POST_TIMES

# =====================
# WIKIPEDIA (AI only)
# =====================
def pick_random_ai_page():
    cat = random.choice(WIKI_CATEGORIES)
    r = requests.get(WIKI_API, params={
        "action":"query","list":"categorymembers","cmtitle":cat,
        "cmtype":"page","cmlimit":200,"format":"json"
    }, timeout=30)
    r.raise_for_status()
    pages = r.json().get("query",{}).get("categorymembers",[])
    if not pages: raise RuntimeError("–ü–æ—Ä–æ–∂–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—è –í—ñ–∫—ñ.")
    bad = ["CAPTCHA","–ö–∞–ø—á–∞","–≤—ñ–¥–µ–æ–≥—Ä–∞","—Å–µ—Ä—ñ–∞–ª","—Ñ—ñ–ª—å–º","–∫—ñ–Ω–æ","–ø–æ–º–∏–ª–∫–∞","—Å–µ—Ä–≤—ñ—Å"]
    pages = [p for p in pages if not any(b.lower() in p["title"].lower() for b in bad)]
    return random.choice(pages)["pageid"]

def fetch_extract(pageid:int):
    r = requests.get(WIKI_API, params={
        "action":"query","prop":"extracts|pageimages|images","pageids":pageid,
        "explaintext":1,"exintro":1,"piprop":"thumbnail","pithumbsize":512,
        "imlimit":20,"format":"json"
    }, timeout=30)
    r.raise_for_status()
    page = r.json()["query"]["pages"][str(pageid)]
    title   = page["title"]
    extract = (page.get("extract") or "").strip()
    return title, extract

# =====================
# TEXT (–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, 2‚Äì3√ó –¥–ª–∏–Ω–Ω–µ–µ)
# =====================
SYNONYMS = {
    "—à—Ç—É—á–Ω–∏–π —ñ–Ω—Ç–µ–ª–µ–∫—Ç":"—à—Ç—É—á–Ω–∏–π —Ä–æ–∑—É–º", "–¥–∞–Ω—ñ":"–Ω–∞–±—ñ—Ä –¥–∞–Ω–∏—Ö", "–∫–æ–º–ø'—é—Ç–µ—Ä":"–ï–û–ú",
    "—Å–∏—Å—Ç–µ–º–∞":"—Å–∏—Å—Ç–µ–º–∞", "–∑–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è":"–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è", "–º–æ–¥–µ–ª—å":"–º–æ–¥–µ–ª—å",
    "–∞–ª–≥–æ—Ä–∏—Ç–º":"–∞–ª–≥–æ—Ä–∏—Ç–º", "–≤–∏–∑–Ω–∞—á–∏—Ç–∏":"–∑‚Äô—è—Å—É–≤–∞—Ç–∏", "–ø–æ–±—É–¥–æ–≤–∞":"—Å—Ç–≤–æ—Ä–µ–Ω–Ω—è"
}

def _split_sents(txt:str, n=6):
    parts = re.split(r"(?<=[.!?])\s+", txt)
    return [re.sub(r"\s+"," ",s).strip() for s in parts if s.strip()][:n]

def _synonymize(s:str)->str:
    out = s
    for k,v in SYNONYMS.items():
        out = re.sub(k, v, out, flags=re.IGNORECASE)
    return out

def make_pro_text(title:str, extract:str)->str:
    """–î–µ–ª–∞–µ–º –º–∏–Ω–∏-–ø–æ—Å—Ç –∏–∑ 3‚Äì4 –∞–±–∑–∞—Ü–µ–≤, –∫–∞–∂–¥—ã–π –ø–æ 2‚Äì3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è."""
    sents = _split_sents(extract, 10)
    if not sents:
        sents = [f"{title} ‚Äî —Ç–µ–º–∞ –∑—ñ —Å–≤—ñ—Ç—É —à—Ç—É—á–Ω–æ–≥–æ —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É."]

    # —Ä–∞–∑–∂—ë–≤—ã–≤–∞–µ–º, –≥—Ä—É–ø–ø–∏—Ä—É–µ–º
    blocks = []
    # –í—Å—Ç—É–ø
    intro = " ".join(_synonymize(s) for s in sents[:2])
    blocks.append(intro)

    # –°—É—Ç—å / —è–∫ –ø—Ä–∞—Ü—é—î
    core = sents[2:5] or sents[:2]
    blocks.append(" ".join(_synonymize(s) for s in core))

    # –ù–∞–≤—ñ—â–æ / –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è
    use = sents[5:8] or sents[2:4]
    lead = random.choice(["–ü—Ä–∞–∫—Ç–∏—á–Ω–æ:", "–î–ª—è —á–æ–≥–æ —Ü–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ:", "–î–µ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è:"])
    blocks.append(lead+" "+" ".join(_synonymize(s) for s in use))

    # –ü–æ—Ä–∞–¥–∞ / –∑–∞—É–≤–∞–∂–µ–Ω–Ω—è
    if len(sents) > 8:
        tip = " ".join(_synonymize(s) for s in sents[8:10])
        blocks.append("–ü–æ—Ä–∞–¥–∞: "+tip)

    # —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ –∞–±–∑–∞—Ü—ã –∏ –≤—ã–¥–µ–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    def emphasize(html:str)->str:
        for kw in sorted(STRONG_KWS,key=len,reverse=True):
            html = re.sub(rf"(?i)\b{kw}\w*\b", lambda m:f"<b>{m.group(0)}</b>", html)
        return html

    paras = []
    for b in blocks:
        wrapped = textwrap.fill(b, width=80)
        paras.append(emphasize(wrapped))

    return "\n\n".join(paras)

def build_caption(title:str, pro_text:str)->str:
    emoji = random.choice(EMOJI_POOL)
    header = f"{emoji} <b>{title}</b>"
    tags   = " ".join(HASHTAGS)
    return f"{header}\n\n{pro_text}\n\n{tags}"

# =====================
# IMAGE (flat card 1:1 c ¬´—Ç–µ–∫—Å—Ç—É—Ä–æ–π –±—É–º–∞–≥–∏¬ª)
# =====================
def _font(sz:int, bold=False):
    path = ("/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf"
            if bold else "/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf")
    return ImageFont.truetype(path, sz)

def _paper_texture(w,h, seed):
    rnd = random.Random(seed)
    base = Image.new("L", (w,h), 242)  # —Å–≤–µ—Ç–ª–∞—è –±—É–º–∞–≥–∞
    px = base.load()
    for y in range(h):
        for x in range(w):
            # –º–µ–ª–∫–∞—è ¬´–∑–µ—Ä–Ω–∏—Å—Ç–æ—Å—Ç—å¬ª
            n = rnd.randint(-6, 6)
            px[x,y] = max(232, min(250, px[x,y] + n))
    img = base.filter(ImageFilter.GaussianBlur(0.6))
    return ImageOps.colorize(img, (245,240,232), (248,246,242))

def _draw_icon_ai(draw, cx, cy, scale=1.0, color=(66, 96, 84)):
    # –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–π ¬´—á–∏–ø/–º–æ–∑–≥¬ª –≤ flat-—Å—Ç–∏–ª–µ
    r = int(140*scale)
    draw.rounded_rectangle((cx-r, cy-r, cx+r, cy+r), 40, outline=color, width=10)
    # –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –Ω–æ–∂–∫–∏
    step = int(40*scale)
    for i in range(-2,3):
        y = cy - r - 22
        draw.line((cx+i*step, y, cx+i*step, y-40), fill=color, width=10)
        draw.line((cx+i*step, cy+r+22, cx+i*step, cy+r+62), fill=color, width=10)
        draw.line((cx-r-22, cy+i*step, cx-r-62, cy+i*step), fill=color, width=10)
        draw.line((cx+r+22, cy+i*step, cx+r+62, cy+i*step), fill=color, width=10)
    # ¬´–Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–≤—è–∑–∏¬ª –≤–Ω—É—Ç—Ä–∏
    small = int(10*scale)
    for ang in range(0,360,30):
        x = cx + int((r-40)*math.cos(math.radians(ang)))
        y = cy + int((r-40)*math.sin(math.radians(ang)))
        draw.ellipse((x-small,y-small,x+small,y+small), fill=color)

def generate_flat_card(title:str, seed:int, out_path:str, hashtag="#–®–Ü"):
    W,H = IMG_SIZE
    # –ë—É–º–∞–≥–∞ c –∑–µ—Ä–Ω–∏—Å—Ç–æ—Å—Ç—å—é
    bg = _paper_texture(W,H, seed)
    img = Image.new("RGBA",(W,H))
    img.paste(bg,(0,0))

    draw = ImageDraw.Draw(img, "RGBA")
    theme = (66, 96, 84)   # –ø—Ä–∏–≥–ª—É—à—ë–Ω–Ω—ã–π –∑–µ–ª—ë–Ω—ã–π ¬´–∫–∞–∫ –≤ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–µ¬ª

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    if ADD_TITLE_ON_IMAGE:
        f_title = _font(112, bold=True)
        ttl = title if len(title) <= 18 else title[:18].rstrip()+"‚Ä¶"
        tw = draw.textlength(ttl, font=f_title)
        draw.text(((W-tw)//2, 110), ttl, font=f_title, fill=theme)

    # –ò–∫–æ–Ω–∫–∞
    _draw_icon_ai(draw, W//2, H//2 + (40 if ADD_TITLE_ON_IMAGE else 0), scale=1.0, color=theme)

    # –ù–µ–±–æ–ª—å—à–∞—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ç–µ–Ω—å, —á—Ç–æ–±—ã ¬´–ø–∞–Ω–µ–ª—å¬ª —á–∏—Ç–∞–ª–∞—Å—å
    shade = Image.new("RGBA",(W,H),(0,0,0,0))
    ImageDraw.Draw(shade).rounded_rectangle((50,50,W-50,H-50), 60, outline=(0,0,0,40), width=8)
    img = Image.alpha_composite(img, shade)

    # –•–µ—à—Ç–µ–≥
    f_tag = _font(48, bold=False)
    tag_w = draw.textlength(hashtag, font=f_tag)
    draw.text(((W-tag_w)//2, H-140), hashtag, font=f_tag, fill=theme)

    # –í–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫
    if BRAND:
        f_b = _font(28)
        bw = draw.textlength(BRAND, font=f_b)
        draw.text((W-26-bw, H-46), BRAND, font=f_b, fill=(120,120,120))

    img.convert("RGB").save(out_path, "PNG")

# =====================
# TELEGRAM
# =====================
def send_photo(photo_path:str, caption:str):
    if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
        raise RuntimeError("–ü–æ—Ä–æ–∂–Ω—ñ TELEGRAM_* —Å–µ–∫—Ä–µ—Ç–∏.")
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendPhoto"
    with open(photo_path, "rb") as f:
        r = requests.post(url, data={
            "chat_id": TELEGRAM_CHAT_ID,
            "caption": caption,
            "parse_mode": "HTML",
            "disable_notification": True,
        }, files={"photo": ("card.png", f, "image/png")}, timeout=60)
    if r.status_code != 200:
        raise RuntimeError(f"Telegram error {r.status_code}: {r.text}")

# =====================
# MAIN
# =====================
def main():
    force = "--force" in sys.argv
    now = dt.datetime.now(TZ)
    if not should_post_now(now, force):
        print("–ù–µ —á–∞—Å –ø–æ—Å—Ç–∏—Ç–∏ ‚Äî –≤–∏—Ö–æ–¥–∏–º–æ")
        return

    pageid = pick_random_ai_page()
    title, extract = fetch_extract(pageid)

    pro_text = make_pro_text(title, extract)            # –¥–ª–∏–Ω–Ω—ã–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
    caption  = build_caption(title, pro_text)

    seed = int(hashlib.sha256((title + now.date().isoformat()).encode()).hexdigest()[:8], 16)
    img_path = "out.png"
    generate_flat_card(title, seed, img_path, hashtag=HASHTAGS[0])

    send_photo(img_path, caption)
    print("–û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ")

if __name__ == "__main__":
    main()
