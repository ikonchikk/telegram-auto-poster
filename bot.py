import os
import re
import sys
import textwrap
import random
import hashlib
import datetime as dt
from zoneinfo import ZoneInfo
from io import BytesIO

import requests
from PIL import Image, ImageDraw, ImageFont, ImageFilter, ImageOps

# =====================
# CONFIG
# =====================
TZ = ZoneInfo("Europe/Kyiv")

# –í—Ä–µ–º—è –ø–æ—Å—Ç–æ–≤ (Kyiv time): 08:00, 14:30, 17:45
POST_TIMES = [(8, 0), (14, 30), (17, 45)]

# Wikipedia –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å—Ç—Ä–æ–≥–æ –ø—Ä–æ –®–Ü
WIKI_API = "https://uk.wikipedia.org/w/api.php"
WIKI_CATEGORIES = [
    "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:–®—Ç—É—á–Ω–∏–π —ñ–Ω—Ç–µ–ª–µ–∫—Ç",
    "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:–ú–∞—à–∏–Ω–Ω–µ –Ω–∞–≤—á–∞–Ω–Ω—è",
    "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:–ù–µ–π—Ä–æ–Ω–Ω—ñ –º–µ—Ä–µ–∂—ñ",
    "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:–û–±—Ä–æ–±–∫–∞ –ø—Ä–∏—Ä–æ–¥–Ω–æ—ó –º–æ–≤–∏",
    "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:–ö–æ–º–ø'—é—Ç–µ—Ä–Ω–∏–π –∑—ñ—Ä",
]

IMG_SIZE = (1280, 720)  # 16:9
HASHTAGS = ["#–®–Ü–¥–ª—è—á–∞–π–Ω–∏–∫—ñ–≤", "#–®–Ü", "#–º–∞—à–∏–Ω–Ω–µ–Ω–∞–≤—á–∞–Ω–Ω—è", "#–Ω–µ–π—Ä–æ–º–µ—Ä–µ–∂—ñ", "#AI"]

BRAND = (os.environ.get("CHANNEL_HANDLE") or "").strip()

TELEGRAM_BOT_TOKEN = (os.environ.get("TELEGRAM_BOT_TOKEN") or "").strip()
TELEGRAM_CHAT_ID = (os.environ.get("TELEGRAM_CHAT_ID") or "").strip()

# –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è
STRONG_KWS = [
    "–Ω–µ–π—Ä–æ–Ω", "–º–µ—Ä–µ–∂", "—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä", "Attention", "GPT", "BERT", "LSTM",
    "–∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü", "—Ä–µ–≥—Ä–µ—Å", "–¥–∞—Ç–∞—Å–µ—Ç", "–æ–±—á–∏—Å–ª–µ–Ω", "GPU", "Tensor", "NLP", "CV", "–º–æ–¥–µ–ª—å", "–∞–ª–≥–æ—Ä–∏—Ç–º"
]

EMOJI_POOL = ["ü§ñ", "üß†", "üìä", "‚öôÔ∏è", "‚ú®", "üß™", "üìà"]

# =====================
# TIME CHECK
# =====================
def should_post_now(now: dt.datetime, force=False) -> bool:
    if force:
        return True
    return (now.hour, now.minute) in POST_TIMES

# =====================
# WIKIPEDIA
# =====================
def pick_random_ai_page():
    cat = random.choice(WIKI_CATEGORIES)
    r = requests.get(WIKI_API, params={
        "action": "query",
        "list": "categorymembers",
        "cmtitle": cat,
        "cmtype": "page",
        "cmlimit": 200,
        "format": "json"
    }, timeout=30)
    r.raise_for_status()
    pages = r.json()["query"]["categorymembers"]
    bad = ["CAPTCHA", "–≤—ñ–¥–µ–æ–≥—Ä–∞", "–∫—ñ–Ω–æ", "—Å–µ—Ä—ñ–∞–ª"]
    pages = [p for p in pages if not any(b.lower() in p["title"].lower() for b in bad)]
    return random.choice(pages)["pageid"]

def fetch_page_data(pageid: int):
    r = requests.get(WIKI_API, params={
        "action": "query",
        "prop": "extracts|pageimages|images",
        "pageids": pageid,
        "explaintext": 1,
        "exintro": 1,
        "piprop": "thumbnail",
        "pithumbsize": 1280,
        "imlimit": 50,
        "format": "json",
    }, timeout=30)
    page = r.json()["query"]["pages"][str(pageid)]
    title = page["title"]
    extract = (page.get("extract") or "").strip()
    thumb = page.get("thumbnail", {}).get("source")
    return title, extract, thumb

# =====================
# SIMPLE UNIQ TEXT
# =====================
SYNONYM_MAP = {
    "—à—Ç—É—á–Ω–∏–π —ñ–Ω—Ç–µ–ª–µ–∫—Ç": "—à—Ç—É—á–Ω–∏–π —Ä–æ–∑—É–º",
    "–∫–æ–º–ø'—é—Ç–µ—Ä": "–ï–û–ú",
    "–∞–ª–≥–æ—Ä–∏—Ç–º": "–∞–ª–≥–æ—Äu—Ç–º",
    "–º–æ–¥–µ–ª—å": "–º–æ–¥e–ª—å",
    "–¥–∞–Ω—ñ": "–∑–±—ñ—Ä–∫–∞ –¥–∞–Ω–∏—Ö",
    "—Å–∏—Å—Ç–µ–º–∞": "—Å–∏—Å—Çe–º–∞",
    "–∑–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è": "–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è",
    "–≤–∏–∑–Ω–∞—á–∏—Ç–∏": "–∑‚Äô—è—Å—É–≤–∞—Ç–∏",
}

def rewrite_text(extract: str) -> str:
    sents = re.split(r"(?<=[.!?])\s+", extract)[:3]
    sents = [re.sub(r"\s+", " ", s).strip() for s in sents if s.strip()]
    text = " ".join(sents)
    for k, v in SYNONYM_MAP.items():
        text = re.sub(k, v, text, flags=re.IGNORECASE)
    return random.choice(["–ö–æ—Ä–æ—Ç–∫–æ:", "–ü—Ä–æ—Å—Ç–æ –ø–æ—è—Å–Ω–∏–º–æ:", "–ü–æ —Å—É—Ç—ñ:"]) + " " + text

def emphasize(text: str) -> str:
    for kw in STRONG_KWS:
        text = re.sub(rf"(?i)\b{kw}\w*\b", lambda m: f"<b>{m.group(0)}</b>", text)
    return text

# =====================
# IMAGE
# =====================
def load_font(size, bold=False):
    path = "/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf" if bold else "/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf"
    return ImageFont.truetype(path, size)

def generate_ai_image(title, seed, out_path):
    random.seed(seed)
    W, H = IMG_SIZE
    img = Image.new("RGB", (W, H), (15, 20, 40))
    draw = ImageDraw.Draw(img, "RGBA")
    for _ in range(40):
        x1, y1 = random.randint(0, W), random.randint(0, H)
        x2, y2 = random.randint(0, W), random.randint(0, H)
        draw.line((x1,y1,x2,y2), fill=(120,180,255,80), width=2)
    for _ in range(60):
        x,y = random.randint(0,W), random.randint(0,H)
        r = random.randint(3,7)
        draw.ellipse((x-r,y-r,x+r,y+r), fill=(180,220,255,200))
    if BRAND:
        f = load_font(28)
        draw.text((W-200, H-50), BRAND, font=f, fill=(200,200,200))
    img.save(out_path, "PNG")

# =====================
# TELEGRAM
# =====================
def send_to_telegram(photo_path, caption):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendPhoto"
    with open(photo_path, "rb") as f:
        r = requests.post(url, data={
            "chat_id": TELEGRAM_CHAT_ID,
            "caption": caption,
            "parse_mode": "HTML"
        }, files={"photo": f})
    if r.status_code != 200:
        raise RuntimeError(f"Telegram error {r.status_code}: {r.text}")

# =====================
# MAIN
# =====================
def main():
    force = "--force" in sys.argv
    now = dt.datetime.now(TZ)
    if not should_post_now(now, force):
        print("–ù–µ —á–∞—Å –ø–æ—Å—Ç–∏—Ç–∏ ‚Äî –≤–∏—Ö–æ–¥–∏–º–æ")
        return
    pageid = pick_random_ai_page()
    title, extract, thumb = fetch_page_data(pageid)
    text = rewrite_text(extract)
    body = emphasize(text)
    caption = f"{random.choice(EMOJI_POOL)} <b>{title}</b>\n\n{body}\n\n{' '.join(HASHTAGS)}"
    img_path = "out.png"
    generate_ai_image(title, now.toordinal(), img_path)
    send_to_telegram(img_path, caption)
    print("–û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ")

if __name__ == "__main__":
    main()
